"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CLI = void 0;
const readline = __importStar(require("readline"));
const chalk_1 = __importDefault(require("chalk"));
const ragAgent_1 = require("./ragAgent");
class CLI {
    constructor() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
        });
        this.agent = new ragAgent_1.RAGAgent();
    }
    // ÊòæÁ§∫Ê¨¢Ëøé‰ø°ÊÅØ
    showWelcome() {
        console.log(chalk_1.default.blue.bold('\nü§ñ LangChain RAG Agent'));
        console.log(chalk_1.default.gray('Âü∫‰∫é Google Gemini ÁöÑÊô∫ËÉΩÈóÆÁ≠îÂä©Êâã\n'));
        this.showHelp();
    }
    // ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
    showHelp() {
        console.log(chalk_1.default.yellow('ÂèØÁî®ÂëΩ‰ª§:'));
        console.log(chalk_1.default.green('  /load <Êñá‰ª∂Ë∑ØÂæÑ>     - Âä†ËΩΩÊñáÊ°£Âà∞Áü•ËØÜÂ∫ì'));
        console.log(chalk_1.default.green('  /add <ÊñáÊú¨ÂÜÖÂÆπ>      - Ê∑ªÂä†ÊñáÊú¨Âà∞Áü•ËØÜÂ∫ì'));
        console.log(chalk_1.default.green('  /status             - Êü•ÁúãÁü•ËØÜÂ∫ìÁä∂ÊÄÅ'));
        console.log(chalk_1.default.green('  /clear              - Ê∏ÖÁ©∫Áü•ËØÜÂ∫ì'));
        console.log(chalk_1.default.green('  /help               - ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ'));
        console.log(chalk_1.default.green('  /quit               - ÈÄÄÂá∫Á®ãÂ∫è'));
        console.log(chalk_1.default.gray('  Áõ¥Êé•ËæìÂÖ•ÈóÆÈ¢òËøõË°åÂØπËØù\n'));
    }
    // Â§ÑÁêÜÂëΩ‰ª§
    async handleCommand(input) {
        const trimmed = input.trim();
        if (trimmed.startsWith('/load ')) {
            const filePath = trimmed.substring(6).trim();
            await this.loadDocument(filePath);
            return true;
        }
        if (trimmed.startsWith('/add ')) {
            const text = trimmed.substring(5).trim();
            await this.addText(text);
            return true;
        }
        if (trimmed === '/status') {
            this.showStatus();
            return true;
        }
        if (trimmed === '/clear') {
            this.clearKnowledgeBase();
            return true;
        }
        if (trimmed === '/help') {
            this.showHelp();
            return true;
        }
        if (trimmed === '/quit' || trimmed === '/exit') {
            return false;
        }
        // Â¶ÇÊûú‰∏çÊòØÂëΩ‰ª§ÔºåÂàôÂΩì‰ΩúÈóÆÈ¢òÂ§ÑÁêÜ
        if (trimmed) {
            await this.askQuestion(trimmed);
        }
        return true;
    }
    // Âä†ËΩΩÊñáÊ°£
    async loadDocument(filePath) {
        try {
            console.log(chalk_1.default.blue(`Ê≠£Âú®Âä†ËΩΩÊñáÊ°£: ${filePath}`));
            await this.agent.loadKnowledgeBase([filePath]);
            console.log(chalk_1.default.green('‚úÖ ÊñáÊ°£Âä†ËΩΩÊàêÂäü!'));
        }
        catch (error) {
            console.log(chalk_1.default.red(`‚ùå Âä†ËΩΩÂ§±Ë¥•: ${error}`));
        }
    }
    // Ê∑ªÂä†ÊñáÊú¨
    async addText(text) {
        try {
            console.log(chalk_1.default.blue('Ê≠£Âú®Ê∑ªÂä†ÊñáÊú¨Âà∞Áü•ËØÜÂ∫ì...'));
            await this.agent.addText(text, { type: 'manual_input', timestamp: new Date().toISOString() });
            console.log(chalk_1.default.green('‚úÖ ÊñáÊú¨Ê∑ªÂä†ÊàêÂäü!'));
        }
        catch (error) {
            console.log(chalk_1.default.red(`‚ùå Ê∑ªÂä†Â§±Ë¥•: ${error}`));
        }
    }
    // ÊòæÁ§∫Áä∂ÊÄÅ
    showStatus() {
        const status = this.agent.getKnowledgeBaseStatus();
        console.log(chalk_1.default.cyan('\nüìä Áü•ËØÜÂ∫ìÁä∂ÊÄÅ:'));
        console.log(chalk_1.default.white(`  ÊñáÊ°£ÁâáÊÆµÊï∞Èáè: ${status.documentCount}`));
        console.log();
    }
    // Ê∏ÖÁ©∫Áü•ËØÜÂ∫ì
    clearKnowledgeBase() {
        this.agent.clearKnowledgeBase();
        console.log(chalk_1.default.green('‚úÖ Áü•ËØÜÂ∫ìÂ∑≤Ê∏ÖÁ©∫!'));
    }
    // ËØ¢ÈóÆÈóÆÈ¢ò
    async askQuestion(question) {
        try {
            console.log(chalk_1.default.blue('\nü§î ÊÄùËÄÉ‰∏≠...'));
            const answer = await this.agent.ask(question);
            console.log(chalk_1.default.green('\nü§ñ ÂõûÁ≠î:'));
            console.log(chalk_1.default.white(answer));
            console.log();
        }
        catch (error) {
            console.log(chalk_1.default.red(`‚ùå ÂõûÁ≠îÂ§±Ë¥•: ${error}`));
        }
    }
    // Ëé∑ÂèñÁî®Êà∑ËæìÂÖ•
    question(prompt) {
        return new Promise((resolve) => {
            this.rl.question(prompt, (answer) => {
                resolve(answer);
            });
        });
    }
    // ÂêØÂä® CLI
    async start() {
        this.showWelcome();
        while (true) {
            try {
                const input = await this.question(chalk_1.default.cyan('> '));
                const shouldContinue = await this.handleCommand(input);
                if (!shouldContinue) {
                    console.log(chalk_1.default.yellow('üëã ÂÜçËßÅ!'));
                    break;
                }
            }
            catch (error) {
                console.log(chalk_1.default.red(`ÈîôËØØ: ${error}`));
            }
        }
        this.rl.close();
    }
}
exports.CLI = CLI;
